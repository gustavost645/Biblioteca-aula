/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela.circulacao;

import dao.EmprestimoDAO;
import dao.LeitorDAO;
import dao.LivroDAO;
import entidade.Autor;
import entidade.Emprestimo;
import entidade.Leitor;
import entidade.Livro;
import entidade.Login;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tela.leitor.ListLeitor;
import util.BibliotecaUtil;
import util.LoggerUtil;

/**
 *
 * @author Gustavo.Steinhoefel
 */
public class IfrCadRenovacao extends javax.swing.JInternalFrame {
    
    private Integer limiteLivros;
    private int linha;
    private Leitor arq = null;
    private Emprestimo emps = null;
    private final EmprestimoDAO daoEmp = new EmprestimoDAO();
    private final IfrCadRenovacao tela;
    private Login user;

    /**
     * Creates new form IfrCadEmprestimo
     */
    public IfrCadRenovacao() {
        tela = this;
        initComponents();
        emps = new Emprestimo();
        this.setTitle("Renovação de Livros");
    }
    
    public IfrCadRenovacao(Login user) {
        tela = this;
        initComponents();
        emps = new Emprestimo();
        this.user = user;
        this.setTitle("Meus Empréstimos");
        if (user.getRole() != 0) {
            txtCodMembro.setFocusable(false);
            jButton1.setFocusable(false);
            txtCodMembro.setText(String.valueOf(user.getId()));
            txtNomeMembro.setText(user.getNome());
            BuscaLivros();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCodMembro = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtNomeMembro = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Código do Leitor:");

        txtCodMembro.setMinimumSize(new java.awt.Dimension(14, 23));
        txtCodMembro.setPreferredSize(new java.awt.Dimension(14, 32));
        txtCodMembro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodMembroFocusLost(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/1480357371_free-01.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtNomeMembro.setEditable(false);
        txtNomeMembro.setFocusable(false);
        txtNomeMembro.setPreferredSize(new java.awt.Dimension(14, 23));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Devolução", "Código", "Descrição Livro", "Autor", "Editora", "Edição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(65);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(500);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(350);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
        }

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/1480357534_free-05.png"))); // NOI18N
        jButton6.setText("Renovar");
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/1479862814_Cancel.png"))); // NOI18N
        jButton5.setText("Fechar");
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Selecionar todos Itens");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(txtCodMembro, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeMembro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton5, jButton6});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtNomeMembro, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCodMembro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodMembroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodMembroFocusLost
        buscaLeitor();
    }//GEN-LAST:event_txtCodMembroFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ListLeitor lm = new ListLeitor(null, true, this);
        lm.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        linha = this.jTable1.getSelectedRow();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if ((!txtCodMembro.getText().trim().isEmpty()) && (jTable1.getRowCount() != 0)) {
            salvar();
        } else {
            JOptionPane.showMessageDialog(null, "Favor selecione algum livro antes de renovar!", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jTable1.getModel() != null) {
            if (jCheckBox1.isSelected()) {
                marcaItensTabela(true);
            } else {
                marcaItensTabela(false);
            }
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCodMembro;
    private javax.swing.JTextField txtNomeMembro;
    // End of variables declaration//GEN-END:variables

    public void setMembro(Leitor leitor) {
        
        txtCodMembro.setText(String.valueOf(leitor.getId()));
        txtNomeMembro.setText(leitor.getNome());
    }
    
    private Date DiasDevolucao() {
        Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        c.add(Calendar.DATE, 7);
        
        if (c.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
            c.add(Calendar.DATE, 1);
        } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY) {
            c.add(Calendar.DATE, 2);
        }
        return c.getTime();
    }
    
    private Date DiasDevolucao(Date dataAtual) {
        Calendar c = Calendar.getInstance();
        c.setTime(dataAtual);
        c.add(Calendar.DATE, 7);
        
        if (c.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
            c.add(Calendar.DATE, 1);
        } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY) {
            c.add(Calendar.DATE, 2);
        }
        return c.getTime();
    }
    
    private void salvar() {
        try {
            /*System.out.println(arq.getLimite_livros()+" - "+jTable1.getRowCount());
            if ( jTable1.getRowCount() > arq.getLimite_livros()) {
                JOptionPane.showMessageDialog(null, "Número de livros excedido para esta locação!", "", JOptionPane.INFORMATION_MESSAGE);
            }else{ 
             */
            boolean ok = false;
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getValueAt(i, 0).equals(true)) {
                    if (new EmprestimoDAO().consultarRenovacao(Integer.parseInt(jTable1.getValueAt(i, 2).toString()), Integer.parseInt(txtCodMembro.getText().trim()))) {
                        emps.setDatavencimento(DiasDevolucao(BibliotecaUtil.stod(jTable1.getValueAt(i, 1).toString())));
                        emps.setId_livro(Integer.parseInt(jTable1.getValueAt(i, 2).toString()));
                        emps.setId_leitor(Integer.parseInt(txtCodMembro.getText().trim()));
                        daoEmp.atualizarVencimento(emps);
                        ok = true;
                    } else {
                        JOptionPane.showMessageDialog(null, "Este Livro não pode ser renovado pois o mesmo já foi renovado uma vez!", "", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                
            }
            if (ok) {
                JOptionPane.showMessageDialog(null, "Renovação Realizado com Sucesso!", "", JOptionPane.INFORMATION_MESSAGE);
                limparTodosCampos();
            }
            
        } catch (HeadlessException | NumberFormatException | SQLException | ParseException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
            LoggerUtil.log(IfrCadRenovacao.class, ex.getMessage());
        }
        
    }
    
    private void limparTodosCampos() {
        txtCodMembro.setText("");
        txtNomeMembro.setText("");
        DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
        for (int a1 = m.getRowCount(); a1 > 0; --a1) {
            m.removeRow(a1 - 1);
        }
        txtCodMembro.requestFocusInWindow();
    }
    
    private void removeItem() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.removeRow(linha);
    }
    
    private void limpaCamposMembro() {
        txtCodMembro.setText("");
        txtNomeMembro.setText("");
        txtCodMembro.requestFocusInWindow();
        jLabel2.setText("");
    }
    
    private String mostraAutores(List<Autor> autores) {
        String ret = "";
        for (int i = 0; i < autores.size(); i++) {
            ret += autores.get(i).getNome() + ",";
        }
        return ret.substring(0, ret.length() - 1);
    }
    
    public void setPosicao() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }
    
    public void setLeitor(Leitor membro) {
        txtCodMembro.setText(String.valueOf(membro.getId()));
        txtNomeMembro.setText(membro.getNome());
        BuscaLivros();
        
    }
    
    private void BuscaLivros() {
        try {
            ArrayList<Livro> li = new LivroDAO().listarEmprestimobyId(txtCodMembro.getText().trim());
            if (!li.isEmpty()) {
                
                for (Livro l : li) {
                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.addRow(new Object[]{
                        Boolean.FALSE,
                        BibliotecaUtil.formatarData(l.getData_aquisicao().toString()),
                        l.getId(),
                        l.getTitulo(),
                        mostraAutores(l.getAutor()),
                        l.getEditora().getDescricao(),
                        l.getEdicao(),});
                }
            } else {
                if (user.getRole() != 1) {
                    JOptionPane.showMessageDialog(null, "Não ha nenhum livro vinculado a este usuário!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    limparTodosCampos();
                } else {
                    jLabel2.setText("Não Foram encontrados Registros!");
                }
            }
        } catch (HeadlessException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
            LoggerUtil.log(IfrCadEmprestimo.class, ex.getMessage());
        }
    }
    
    private void marcaItensTabela(boolean b) {
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            jTable1.setValueAt(b, i, 0);
        }
    }
    
    private void buscaLeitor() {
        try {
            if (!txtCodMembro.getText().trim().isEmpty()) {
                arq = new LeitorDAO().consultarId(Integer.parseInt(txtCodMembro.getText().trim()));
                if (arq != null) {
                    txtNomeMembro.setText(arq.getNome());
                    BuscaLivros();
                } else {
                    JOptionPane.showMessageDialog(null, "Não foi possível localizar o leitor por este código!", "Aviso", JOptionPane.WARNING_MESSAGE);
                    limpaCamposMembro();
                }
            }
        } catch (HeadlessException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
            LoggerUtil.log(IfrCadRenovacao.class, ex.getMessage());
        }
    }
    
    private boolean BuscaLivros2() {
        return true;
    }
    
}
